#include <iostream>
#include <memory>
using namespace std;

class CuentaBancaria 
{
private:
    float saldo;

public:
    CuentaBancaria(float saldoInicial) : saldo(saldoInicial) {}

    float getSaldo() const { return saldo; }

    void modificarSaldo(float cantidad) { saldo += cantidad; }

    void consultarSaldo() const { cout << "Su saldo actual es de: S/ " << saldo << endl; }
};

// Interfaz para operaciones de depósito
class IDeposito 
{
public:
    virtual ~IDeposito() = default;
    virtual void depositar(float cantidad, CuentaBancaria& cuenta) const = 0;
};

// Interfaz para operaciones de retiro
class IRetiro 
{
public:
    virtual ~IRetiro() = default;
    virtual void retirar(float cantidad, CuentaBancaria& cuenta) const = 0;
};

// Interfaz para operaciones de transferencia bancaria
class ITransferencia 
{
public:
    virtual ~ITransferencia() = default;
    virtual void transferir(float cantidad, CuentaBancaria& cuentaOrigen, CuentaBancaria& cuentaDestino) const = 0;
};

// Implementación concreta de la interfaz para operaciones de depósito
class Deposito : public IDeposito 
{
public:
    void depositar(float cantidad, CuentaBancaria& cuenta) const override 
    {
        if (cantidad > 0) 
        {
            cuenta.modificarSaldo(cantidad);
            cout << "Depositó S/ " << cantidad << " en su cuenta." << endl;
        } 
        else 
        {
            cout << "No puede depositar una cantidad negativa." << endl;
        }
    }
};

// Implementación concreta de la interfaz para operaciones de retiro
class Retiro : public IRetiro 
{
public:
    void retirar(float cantidad, CuentaBancaria& cuenta) const override 
    {
        if (cantidad <= cuenta.getSaldo() && cantidad > 0) 
        {
            cuenta.modificarSaldo(-cantidad);
            cout << "Retiró S/ " << cantidad << " de su cuenta." << endl;
        } 
        else 
        {
            cout << "No tiene suficiente saldo para realizar esta operación." << endl;
        }
    }
};

// Implementación concreta de la interfaz para operaciones de transferencia bancaria
class TransferenciaBancaria : public ITransferencia 
{
public:
    void transferir(float cantidad, CuentaBancaria& cuentaOrigen, CuentaBancaria& cuentaDestino) const override 
    {
        if (cantidad <= cuentaOrigen.getSaldo() && cantidad > 0) 
        {
            cuentaOrigen.modificarSaldo(-cantidad);
            cuentaDestino.modificarSaldo(cantidad);
            cout << "Transferencia exitosa. Se transfirieron $" << cantidad << " a la cuenta del destinatario." << endl;
        } 
        else 
        {
            cout << "No tiene suficiente saldo para realizar esta operación." << endl;
        }
    }
};

int main() 
{
    CuentaBancaria cuenta(10000);
    CuentaBancaria cuentaDestino(0);
    int opcion;
    float cantidad;

    // Uso de abstracciones
    unique_ptr<IDeposito> operacionDeposito;
    unique_ptr<IRetiro> operacionRetiro;
    unique_ptr<ITransferencia> operacionTransferencia;

    do {
        cout << "Bienvenido al cajero automático" << endl;
        cout << "1. Consultar saldo" << endl;
        cout << "2. Retirar dinero" << endl;
        cout << "3. Transferir dinero" << endl;
        cout << "4. Cambiar dinero a dólares" << endl;
        cout << "5. Salir" << endl;
        cout << "Ingrese una opción: ";
        cin >> opcion;

        switch (opcion) 
        {
            case 1:
                cuenta.consultarSaldo();
                break;
            case 2:
                cout << "Ingrese la cantidad a retirar: S/";
                cin >> cantidad;
                operacionRetiro = make_unique<Retiro>();
                operacionRetiro->retirar(cantidad, cuenta);
                break;
            case 3:
                cout << "Ingrese la cantidad a transferir: S/";
                cin >> cantidad;
                operacionTransferencia = make_unique<TransferenciaBancaria>();
                operacionTransferencia->transferir(cantidad, cuenta, cuentaDestino);
                break;
            // Puedes agregar más casos para otras operaciones aquí
            case 5:
                cout << "Gracias por utilizar el cajero automático. ¡Hasta luego!" << endl;
                break;
            default:
                cout << "Opción inválida. Por favor, ingrese una opción válida." << endl;
                break;
        }

        cout << endl;
    } while (opcion != 5);

    return 0;
}
